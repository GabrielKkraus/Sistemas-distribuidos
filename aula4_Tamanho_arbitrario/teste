// --- Servidor TCP Multithread para Transferência de Arquivos --- package engtelecom.std.servidor;

import java.net.ServerSocket; import java.net.Socket; import java.io.*;

public class Servidor { public static void main(String[] args) { System.out.println("\u2591\u2592\u2592 Servidor de Arquivos Iniciado \u2592\u2592\u2591"); int porta = 12345;

try (ServerSocket servidor = new ServerSocket(porta)) {
        System.out.println("Aguardando conexões em " + servidor.getInetAddress() + ":" + porta);
        while (true) {
            new Thread(new AtenderCliente(servidor.accept())).start();
        }
    } catch (IOException e) {
        System.err.println("Erro ao iniciar o servidor: " + e.getMessage());
    }
}

}

class AtenderCliente implements Runnable { private Socket cliente;

public AtenderCliente(Socket cliente) {
    this.cliente = cliente;
}

@Override
public void run() {
    try (
        DataInputStream dis = new DataInputStream(cliente.getInputStream());
        DataOutputStream dos = new DataOutputStream(cliente.getOutputStream())
    ) {
        String nomeArquivo = dis.readUTF();
        File arquivo = new File(nomeArquivo);

        if (arquivo.exists() && arquivo.isFile()) {
            dos.writeLong(arquivo.length());
            byte[] buffer = new byte[4096];
            int bytesLidos;
            try (FileInputStream fis = new FileInputStream(arquivo)) {
                while ((bytesLidos = fis.read(buffer)) != -1) {
                    dos.write(buffer, 0, bytesLidos);
                }
            }
        } else {
            dos.writeLong(-1);
        }

        dos.flush();
        cliente.close();

    } catch (IOException e) {
        System.err.println("Erro ao atender cliente: " + e.getMessage());
    }
}

}

// --- Cliente para Receber Arquivo de Tamanho Arbitrário --- package engtelecom.std.cliente;

import java.io.*; import java.net.Socket;

public class Cliente { public static void main(String[] args) { System.out.println("\n\u2591\u2592\u2592 Cliente de Transferência de Arquivo \u2592\u2592\u2591\n"); String enderecoServidor = "localhost"; int porta = 12345;

if (args.length >= 1) {
        enderecoServidor = args[0];
    }
    if (args.length >= 2) {
        porta = Integer.parseInt(args[1]);
    }

    String nomeArquivo = "exemplo.txt"; // Pode ser substituído via args
    if (args.length >= 3) {
        nomeArquivo = args[2];
    }

    try (Socket socket = new Socket(enderecoServidor, porta);
         DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
         DataInputStream dis = new DataInputStream(socket.getInputStream())) {

        dos.writeUTF(nomeArquivo);
        long tamanhoArquivo = dis.readLong();

        if (tamanhoArquivo == -1) {
            System.out.println("Arquivo não encontrado no servidor.");
            return;
        }

        try (FileOutputStream fos = new FileOutputStream("download_" + nomeArquivo)) {
            byte[] buffer = new byte[4096];
            long total = 0;
            int bytesLidos;
            while (total < tamanhoArquivo &&
                    (bytesLidos = dis.read(buffer, 0, (int)Math.min(buffer.length, tamanhoArquivo - total))) != -1) {
                fos.write(buffer, 0, bytesLidos);
                total += bytesLidos;
            }
        }

        System.out.println("Arquivo '" + nomeArquivo + "' recebido com sucesso.");
    } catch (IOException e) {
        System.err.println("Erro durante comunicação com servidor: " + e.getMessage());
    }
}

}

